// schema.prisma (versión en inglés)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  role              String
  verified          Boolean   @default(false)
  birthday          DateTime?
  gender            String?
  contry            String?
  department        String?
  district          String?
  imageUrl          String?
  sexualOrientation String?
  phone             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companionProfile CompanionProfile?
  bookings         Booking[]
}

model CompanionProfile {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  name              String
  age               Int
  contry            String?
  department        String
  district          String
  description       String
  imageUrl          String?
  rating            Float?  @default(5.0)
  price             Float
  sexualOrientation String
  height            Float
  gender            String
  phone             String  @default("999999999")

  hourlyRate   Float?
  availability String?

  availableFrom     String?  @default("00:00")
  availableUntil    String?  @default("23:59")
  maxBookingHours   Int?     @default(1)


  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  bookings  Booking[]
  photos    Photo[]
  tags      Tag[]      @relation("TagsToProfiles")
  dateTypes DateType[] @relation("DateTypesToProfiles")
}

model Location {
  id           Int     @id @default(autoincrement())
  name         String
  city         String
  country      String
  coordinates  String
  isActive     Boolean @default(true)
  adminCreated Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
}

model Booking {
  id            Int      @id @default(autoincrement())
  clientId      Int
  companionId   Int
  locationId    Int
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  amount        Float
  status        String
  paymentMethod String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client    User             @relation(fields: [clientId], references: [id])
  companion CompanionProfile @relation(fields: [companionId], references: [id])
  location  Location         @relation(fields: [locationId], references: [id])
  payment   Payment?
}

model Payment {
  id              Int      @id @default(autoincrement())
  bookingId       Int      @unique
  totalAmount     Float
  commission      Float
  companionAmount Float
  status          String
  paymentMethod   String
  date            DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
}

model Photo {
  id           Int    @id @default(autoincrement())
  profileId    Int
  url          String
  cloudinaryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companionProfile CompanionProfile @relation(fields: [profileId], references: [id])
}

model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profiles CompanionProfile[] @relation("TagsToProfiles")
}

model DateType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profiles CompanionProfile[] @relation("DateTypesToProfiles")
}

// model Tag {
//   id          Int    @id @default(autoincrement())
//   profileId   Int    
//   name        String 

//   companionProfile CompanionProfile @relation(fields: [profileId], references: [id])
// }

// model DateType {
//   id          Int    @id @default(autoincrement())
//   profileId   Int    
//   name        String 

//   companionProfile CompanionProfile @relation(fields: [profileId], references: [id])
// }
